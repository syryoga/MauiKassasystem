@page "/login-admin"
@using MauiKassasystem.Datenbank
@inject DatabaseContext dbContext
@inject NavigationManager navman

<div class="wrapper">
    <div class="topbar">
        <div class="logo-wrapper">
            <a href="#"><img src="drawable/Logo_BBRZ.png" alt="BBRZ" height="50" /></a>
        </div>
        <h1 class="pagename">Administrator</h1>
        <div class="topbar-btn-wrapper">
            <Button OnClickAction="Logout"
                    Icon="icon-cross"
                    Name="ABBRECHEN" />
        </div>
    </div>
    <div class="main-wrapper">
        @if (!FakeDatabase.IsAuthenticated)
        {
            <div>

                @if (!IsResettingPassword)
                {
                    <h2>Passwort:</h2>
                    <input type="password" @bind-value="@Password" placeholder="Passwort"/>
                    <br />
                    <button class="m-button button-primary" @onclick="ShowPopup">Passwort zurücksetzen</button>
                    <button class="m-button button-primary" @onclick="Login">Anmelden</button>
                    <br />

                    //PopUp start
                    @if (showPopup)
                    {
                        <div class="popup-container">
                            <div class="popup-content">
                                <h4>Achtung!!!</h4>
                                <p>Wollen Sie wirklich zurücksetzen?</p>
                                <button  class="m-button button-primary" @onclick="StartResetPassword">Zurücksetzen</button>
                                <button class="m-button button-primary" @onclick="ClosePopup">Abrechen</button>
                            </div>
                        </div>
                    }
                    //PopUp end
                    
                }
                else
                {

                    @if (!IsMasterPassword)
                    {
                        <h2>Mit Masterpasswort anmelden</h2>
                        <input type="password" autocomplete="off" @bind-value="@Password"/>
                        <br />
                        <button class="m-button button-primary" @onclick="AreMasterPasswordsMatching">Anmelden</button>
                    }

                    @if (IsMasterPassword)
                    {
                        <h3>Bitte geben sie ein neus Passwort ein:</h3>
                        <input type="password" @bind-value="@NewPassword" @bind-value:event="oninput" />
                        <br />
                        <input type="password" @bind-value="@ConfirmNewPassword" @bind-value:event="oninput" @onchange="CheckPasswordMatch" />
                        <br />
                        @if (ShowPasswordMismatchError)
                        {
                            <p style="color: red;">Die eingaben stimmen nicht überein.</p>
                        }
                        <button class="m-button button-primary" @onclick="FakeDatabase.SaveNewPassword" disabled="@(!ArePasswordsMatching())">Speichern</button>
                        @*<button class="m-button button-primary" @onclick="CancelResetPassword">Abbrechen</button>*@
                        <br />

                    }
                }
            </div>
        }
        else
        {
            <p>Bereits angemeldet</p>
        }
    </div>

</div>


@code {
    //Popup start
    bool showPopup = false;

    void ShowPopup()
    {
        showPopup = true;
    }

    void ClosePopup()
    {
        showPopup = false;
    }
    //Popup end





    static public string Password = "";
    static public bool IsMasterPassword = false;
    static public string MasterPassword = "123";
    //private List<string> AdminPasswords = new List<string>();

    // Reset Password fields
    static public bool IsResettingPassword = false;
    static public string NewPassword = "";
    static public string ConfirmNewPassword = "";
    static public bool ShowPasswordMismatchError = false;

    //Admin Login
    private void Login()
    {
        if (FakeDatabase.adminzugangsdaten.AdminPassword == Password)
        {
            FakeDatabase.IsAuthenticated = true;
            navman.NavigateTo("/admin-page");
        }
    }

    private void Logout()
    {
        FakeDatabase.IsAuthenticated = false;
        navman.NavigateTo("/");
    }

    public void StartResetPassword()
    {
        ClosePopup();
        IsResettingPassword = true;
        Password = "";
    }

    static public void CancelResetPassword()
    {
        IsResettingPassword = false;
        NewPassword = "";
        ConfirmNewPassword = "";
        ShowPasswordMismatchError = false;
    }

    ////Löscht das alte Passwort aus der Liste und speichert das neue
    //private void SaveNewPassword()
    //{
    //    if (Password == MasterPassword)
    //    {
    //        if (ArePasswordsMatching())
    //        {
    //            FakeDatabase.adminzugangsdaten.AdminPassword = NewPassword;
    //            IsAuthenticated = false; // Log out the user
    //            IsResettingPassword = false; // Reset the password reset state
    //            NewPassword = ""; // Reset the password input fields
    //            ConfirmNewPassword = "";
    //            ShowPasswordMismatchError = false;
    //            StateHasChanged(); // Reload the component
    //        }
    //        else
    //        {
    //            ShowPasswordMismatchError = true;
    //        }


    //    }
    //}

    //Überprüft das AdminPasswort

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Password = "";
    }

    static public bool ArePasswordsMatching()
    {
        return NewPassword == ConfirmNewPassword;
    }

    //Überprüft das MasterPasswort
    static public void AreMasterPasswordsMatching()
    {
        if (Password == MasterPassword)
        {
            IsMasterPassword = true;
        }
    }

    static public void CheckPasswordMatch()
    {
        ShowPasswordMismatchError = NewPassword != ConfirmNewPassword;
    }



}