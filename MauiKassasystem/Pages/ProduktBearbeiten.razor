@page "/produkt-bearbeiten"
@*@page "/produkt-bearbeiten/{id}"*@
@inject DatabaseContext dbContext;

<div class="admin-wrapper">


	<div class="topbar">
		<div class="logo-wrapper">
			<a href="#"><img src="drawable/Logo_BBRZ.png" alt="BBRZ" height="50" /></a>
		</div>
		<h1 class="pagename">Produkt bearbeiten</h1>
		<div class="topbar-btn-wrapper">
			<a class="button-primary logout-btn" href="/"><span>ZURÜCK</span></a>
		</div>
	</div>





    <div class="admin-form-wrapper">
		<div class="dark-box admin-form-box">
			<form>
			
				<p>
					<label>Produkt wählen:</label>
					<select id="prod" @bind="@_prodId">
						<option hidden checked></option>
						@foreach (var item in products)
						{
							<option value="@item.Id" onchange="@UpdateCat(); @UpdatePic(); @UpdatePrice(); ">@item.ProduktName</option>
						}
					</select>
					<input placeholder="Neuer Produktname" style="margin-left: 70px;" />
				</p>

			
				<p><label>Kategorie:</label><input value="@_catName" disabled="disabled" /> <input placeholder="Neue Kategorie" style="margin-left: 70px;" /></p>
				
				<p>
					<label>Bild:</label>
					@if (_catPic != null)
					{
						<img height="32" src="@_catPic"/>
					}
					
						<img height="32" src="@_catPic" />
					

				</p>
				<p><label>Preis:</label><input type="text" value="@_prodPrice" disabled="disabled" />&euro; <input type="text" placeholder="Neuer Preis" style="margin-left: 70px;" />&euro;</p>
				

				<p class="right-align"><input type="submit" class="admin-form-btn btn-inactive" value="Senden" @onclick="UpdateProduct"/>&nbsp;<input type="submit" class="admin-form-btn" value="Abbrechen" style="margin-right:40px;"/></p>
			</form>

		</div>
	</div>

	
</div>

@code {
	

	
	

	

	List<Produkt> products = new();

	List<Kategorie> kategories = new();

	Produkt product = new();

	int _prodId;

	int _catId;

	string _catName;

	string _prodPrice;

	string _catPic;

	protected override async Task OnInitializedAsync()
	{
		//kategories = await dbContext.
		kategories = await dbContext.AllCategoriesToListAsync();
		products = await dbContext.AllProductsToListAsync();
	}

	protected async Task UpdateProduct()
	{
		await dbContext.UpdateProductAsync(product);
	}


}

@functions
{

	public string UpdatePrice()
	{
		foreach (var item in products)
		{
			if (item.Id.Equals(_prodId))
			{
				return _prodPrice = item.ProduktPreis.ToString("0.00");
			}

		}
		return null;
	}

	public string UpdatePic()
	{
		foreach (var item in products)
		{
			if (item.Id.Equals(_prodId))
			{
				return _catPic = item.ProduktBild;
			}

		}
		return null;
	}

	public string UpdateCat()
	{
		foreach (var item in products)
		{
			if (_prodId.Equals(item.Id))
			{
				_catId = item.KategorieId;
				switch (_catId.ToString())
				{
					case "1":
						_catName = "Warm";
						break;
					case "2":
						_catName = "Kalt";
						break;
					case "3":
						_catName = "Snack";
						break;
					case "4":
						_catName = "Sonstiges";
						break;
				}
				return _catName;
			}
		}
		return null;
	}
}
